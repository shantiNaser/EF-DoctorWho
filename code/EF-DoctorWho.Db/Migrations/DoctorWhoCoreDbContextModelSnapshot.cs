// <auto-generated />
using System;
using EF_DoctorWho.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EF_DoctorWho.Db.Migrations
{
    [DbContext(typeof(DoctorWhoCoreDbContext))]
    partial class DoctorWhoCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EF_DoctorWho.Db.tblAuthor", b =>
                {
                    b.Property<int>("tblAutorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("tblAutorID");

                    b.ToTable("tblAuthor");
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblCompanion", b =>
                {
                    b.Property<int>("tblCompanionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("WhoPlayed")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("companionName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("tblCompanionID");

                    b.ToTable("tblCompanion");
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblDoctor", b =>
                {
                    b.Property<int>("tblDoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DoctorNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstEpisodeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastEpisodeDate")
                        .HasColumnType("datetime2");

                    b.HasKey("tblDoctorID");

                    b.ToTable("tblDoctor");
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblEnemy", b =>
                {
                    b.Property<int>("tblEnemyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnemyName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("tblEnemyId");

                    b.ToTable("tblEnemy");
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblEpisode", b =>
                {
                    b.Property<int>("tblEpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EpisodeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<string>("EpisodeType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SeriesNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("tblAuthorID")
                        .HasColumnType("int");

                    b.Property<int>("tblDoctorID")
                        .HasColumnType("int");

                    b.HasKey("tblEpisodeID");

                    b.HasIndex("tblAuthorID")
                        .IsUnique();

                    b.HasIndex("tblDoctorID")
                        .IsUnique();

                    b.ToTable("tblEpisode");
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblEpisodeCompanion", b =>
                {
                    b.Property<int>("tblEpisodeCompanionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("tblCompanionID")
                        .HasColumnType("int");

                    b.Property<int>("tblEpisodeID")
                        .HasColumnType("int");

                    b.HasKey("tblEpisodeCompanionID");

                    b.HasIndex("tblCompanionID")
                        .IsUnique();

                    b.HasIndex("tblEpisodeID")
                        .IsUnique();

                    b.ToTable("tblEpisodeCompanion");
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblEpisodeEnemy", b =>
                {
                    b.Property<int>("tblEpisodeEnemyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("tblEnemyID")
                        .HasColumnType("int");

                    b.Property<int>("tblEpisodeID")
                        .HasColumnType("int");

                    b.HasKey("tblEpisodeEnemyID");

                    b.HasIndex("tblEnemyID")
                        .IsUnique();

                    b.HasIndex("tblEpisodeID")
                        .IsUnique();

                    b.ToTable("tblEpisodeEnemy");
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblEpisode", b =>
                {
                    b.HasOne("EF_DoctorWho.Db.tblAuthor", null)
                        .WithOne("Episode")
                        .HasForeignKey("EF_DoctorWho.Db.tblEpisode", "tblAuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_DoctorWho.Db.tblDoctor", null)
                        .WithOne("Episode")
                        .HasForeignKey("EF_DoctorWho.Db.tblEpisode", "tblDoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblEpisodeCompanion", b =>
                {
                    b.HasOne("EF_DoctorWho.Db.tblCompanion", null)
                        .WithOne("EpisodeCompanion")
                        .HasForeignKey("EF_DoctorWho.Db.tblEpisodeCompanion", "tblCompanionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_DoctorWho.Db.tblEpisode", null)
                        .WithOne("EpisodeCompanion")
                        .HasForeignKey("EF_DoctorWho.Db.tblEpisodeCompanion", "tblEpisodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblEpisodeEnemy", b =>
                {
                    b.HasOne("EF_DoctorWho.Db.tblEnemy", null)
                        .WithOne("EpisodeEnemy")
                        .HasForeignKey("EF_DoctorWho.Db.tblEpisodeEnemy", "tblEnemyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_DoctorWho.Db.tblEpisode", null)
                        .WithOne("EpisodeEnemy")
                        .HasForeignKey("EF_DoctorWho.Db.tblEpisodeEnemy", "tblEpisodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblAuthor", b =>
                {
                    b.Navigation("Episode");
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblCompanion", b =>
                {
                    b.Navigation("EpisodeCompanion");
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblDoctor", b =>
                {
                    b.Navigation("Episode");
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblEnemy", b =>
                {
                    b.Navigation("EpisodeEnemy");
                });

            modelBuilder.Entity("EF_DoctorWho.Db.tblEpisode", b =>
                {
                    b.Navigation("EpisodeCompanion");

                    b.Navigation("EpisodeEnemy");
                });
#pragma warning restore 612, 618
        }
    }
}
